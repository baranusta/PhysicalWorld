#version 430 core

layout (local_size_x = 8, local_size_y = 1) in;

layout(std430, binding = 0) buffer position_ssbo{ vec4 position[]; };
layout(std430, binding = 1) buffer density_ssbo{ float density[];};
layout(std430, binding = 2) buffer pressure_ssbo{ float pressure[];};
layout(std430, binding = 3) buffer radius_ssbo{ float radius[];};
layout(std430, binding = 4) buffer mass_ssbo{ float mass[]; };
layout(std430, binding = 5) buffer force_ssbo{ vec4 force[]; };

uniform uint size;

#define FACTOR 4.774648


float kernel_spiky(float distance, float h, float h_pow6)
{
	if(distance > h)
	{
		return 0.f;
	}
	return FACTOR * pow(distance - h, 3) / h_pow6;
}


void main(void)
{
	uint id = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
	if(id < size)
	{ 
		vec4 pos = position[id];
		float p = pressure[id];
		float h = radius[id];
		float h_pow6 = pow(h,6);
		vec3 f = vec3(0);
		for(int i=0; i< size; i++)
		{
			vec3 toMe = (pos - position[i]).xyz;
			float distance = length(toMe);
			if(distance > 0)
				f -= (mass[i] * (p + pressure[i]) * kernel_spiky(length(toMe), h, h_pow6)/ (density[i] / 2)) * normalize(toMe);
		}
		force[id] = vec4(f,0);
	}
}