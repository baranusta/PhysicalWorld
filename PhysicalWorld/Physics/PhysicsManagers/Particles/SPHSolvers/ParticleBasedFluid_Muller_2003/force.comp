#version 430 core

layout (local_size_x = 8, local_size_y = 1) in;

layout(std430, binding = 0) buffer position_ssbo{ vec4 position[]; };
layout(std430, binding = 1) buffer velocity_ssbo{ vec4 velocity[]; };
layout(std430, binding = 2) buffer density_ssbo{ float density[];};
layout(std430, binding = 3) buffer pressure_ssbo{ float pressure[];};
layout(std430, binding = 4) buffer viscosity_ssbo{ float viscosity[];};
layout(std430, binding = 5) buffer radius_ssbo{ float radius[];};
layout(std430, binding = 6) buffer mass_ssbo{ float mass[]; };
layout(std430, binding = 7) buffer force_ssbo{ vec4 force[]; };

uniform uint size;
uniform vec3 gravity;
uniform uint type;

#define FACTOR 4.774648


float kernel_spiky(float distance, float h, float h_pow6)
{
	if(distance >= h)
	{
		return 0.f;
	}
	return FACTOR * pow(h - distance, 3) / h_pow6;
}

float kernel_viscosity(float distance, float h, float h_pow2, float h_pow3)
{
	if(distance >= h)
	{
		return 0;
	}
	float firstTirm = -(distance * distance * distance) / (2 * h_pow3);
	float secondTirm = distance * distance / h_pow2;
	float thirdTirm = h / (2 * distance);
	
	return (FACTOR / h_pow2) * (firstTirm + secondTirm + thirdTirm - 1);
}

void computePressureForces(uint id, vec4 pos, float h)
{
	vec3 f = vec3(0);
		
	float p = pressure[id];
	float h_pow6 = pow(h,6);
	for(int i=0; i< size; i++)
	{
		vec3 toMe = (position[i] - pos).xyz;
		float distance = length(toMe);
		float dens = density[i];
		if(distance > 0.0001 && dens != 0)
		f -= (mass[i] * (p + pressure[i]) * kernel_spiky(length(toMe), h, h_pow6)/ (dens * 2)) * normalize(toMe);
	}
	force[id] = vec4(f,0);
}

void computeViscosityForce(uint id, vec4 pos, float h)
{
	vec3 f = vec3(0);

	float h_pow2 = pow(h,2);
	float h_pow3 = pow(h,3);
	vec4 v = velocity[id];
	for(uint i=0; i< size; i++)
	{
		vec3 toMe = (pos - position[i]).xyz;
		float distance = length(toMe);
		float dens = density[i];
		if(distance > 0.0001 && dens != 0)
			f += (mass[i] * (velocity[i] - v).xyz * kernel_viscosity(length(toMe), h, h_pow2, h_pow3)/ dens);
	}
	force[id] += vec4(f,0) * viscosity[id];
}

#define XX 0.8
void computeExternalForces(uint id, vec4 pos, float h)
{
	//force[id] += vec4(gravity, 0);
	vec4 vel = velocity[id];
	vec4 res = clamp(pos,-XX,XX);
	res.y = pos.y;
	if (res.x != pos.x)
		vel.x *= -1;
	if (res.y < -XX)
	{
		vel.y *= -1;
		res.y = -XX;
	}
	if (res.z != pos.z)
		vel.z *= -1;

	velocity[id] = vel;
	position[id] = res; 
}

void main(void)
{
	uint id = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
	if(id < size)
	{ 
		vec4 pos = position[id];
		float h = radius[id];
		switch(type)
		{
			case 0:
			computePressureForces(id, pos, h);
			break;
			case 1:
			computeViscosityForce(id, pos,h);
			break;
			case 2:
			computeExternalForces(id, pos, h);
			break;
			default:
			break;
		}
	}
}