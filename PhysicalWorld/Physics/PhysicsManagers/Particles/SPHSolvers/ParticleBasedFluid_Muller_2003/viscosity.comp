#version 430 core

layout (local_size_x = 8, local_size_y = 1) in;

layout(std430, binding = 0) buffer position_ssbo{ vec4 position[]; };
layout(std430, binding = 1) buffer velocity_ssbo{ vec4 velocity[]; };
layout(std430, binding = 2) buffer density_ssbo{ float density[];};
layout(std430, binding = 3) buffer viscosity_ssbo{ float viscosity[];};
layout(std430, binding = 4) buffer radius_ssbo{ float radius[];};
layout(std430, binding = 5) buffer mass_ssbo{ float mass[]; };
layout(std430, binding = 6) buffer force_ssbo{ vec4 force[]; };

uniform uint size;

#define FACTOR 2.387324


float kernel_viscosity(float distance, float h, float h_pow2, float h_pow3)
{
	if(distance > h)
	{
		return 0;
	}
	float firstTirm = -(distance * distance * distance) / (2 * h_pow3);
	float secondTirm = distance * distance / h_pow2;
	float thirdTirm = h / (2 * distance);
	
	return (FACTOR / h_pow2) * (firstTirm + secondTirm + thirdTirm - 1);
}


void main(void)
{
	uint id = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
	if(id < size)
	{
		vec4 pos = position[id];
		vec4 v = velocity[id];
		float h = radius[id];
		float h_pow2 = pow(h,2);
		float h_pow3 = pow(h,3);
		vec3 f = vec3(0);
		for(uint i=0; i< size; i++)
		{
			vec3 toMe = (pos - position[i]).xyz;
			float distance = length(toMe);
			if(distance > 0)
				f -= (mass[i] * (velocity[i] - v).xyz * kernel_viscosity(length(toMe), h, h_pow2, h_pow3)/ density[i]);
		}
		force[id] = vec4(f,0) * 0.1f;//viscosity[id];
	}
}