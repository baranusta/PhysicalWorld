#version 430 core
//Have to define macros
//THREAD_COUNT_X
layout (local_size_x = THREAD_COUNT_X, local_size_y = 1) in;

layout(std430, binding = 0) buffer position_ssbo{ vec4 position[]; };
layout(std430, binding = 1) buffer radius_ssbo{ float radius[];};
layout(std430, binding = 2) buffer mass_ssbo{ float mass[]; };
layout(std430, binding = 3) buffer density_ssbo{ float density[]; };

uniform uint size;

#define FACTOR 1.5666814

float kernel_poly6(float dist, float h, float h_pow2, float h_pow9)
{
	if(dist > h)
		return h;

	float value = h_pow2 - dist * dist;
	return FACTOR * value * value * value / h_pow9;
}

void main(void)
{
	uint id = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
	if(id < size)
	{
		vec4 pos = position[id];
		float h = radius[id];
		float h_pow2 = h * h;
		float h_pow9 = pow(h,9);
		float d = 0;
		for(uint i = (id + 1) % size; i != id ;)
		{ 
			d += mass[i] * kernel_poly6(length(pos - position[i]), h, h_pow2, h_pow9);
			i++;
			i %= size;
		}
		density[id] = d; 
	}
}